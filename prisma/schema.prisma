// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: for direct connections when using connection pooling
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  expenses    Expense[]
  splits      Split[]
  groups      Group[] @relation("GroupMembers")

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  memberships Membership[]
  expenses    Expense[]
  users       User[] @relation("GroupMembers")

  @@map("groups")
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("member") // owner, admin, member
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("memberships")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Decimal  @db.Decimal(10, 2)
  imageUrl    String?  // Added for receipt storage
  groupId     String
  paidById    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy  User   @relation(fields: [paidById], references: [id], onDelete: Cascade)
  splits  Split[]

  @@map("expenses")
}

model Split {
  id        String   @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("splits")
}
